using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEngine;

/// <summary>
/// Class required to communicate with machine learning module.
/// </summary>
public class MLCommunicator {

    /// <summary>
    /// reads parameter tuning data file generated by machine learning module
    /// </summary>
    public static void readMLFile() {

        //TODO:Implement
        return;
    }

    /// <summary>
    /// writes level stats to a file to be used by machine learning module
    /// </summary>
    /// <param name="levelStats">LevelStats of current level</param>
    public static void writeMLTrainFile() {

        string path = Application.persistentDataPath + "/" + "train_" + DateTime.Now.ToString("yy_mm_dd_hh_mm_ss") + ".in";
        using (StreamWriter writetext = new StreamWriter( path)) {

            foreach (KeyValuePair<LevelStat, float> entry in MLLevelStats.GetStats()) {

                writetext.WriteLine(entry.Value.ToString() + ":" + entry.Key + ";");
            }

            foreach (KeyValuePair<PlayStat, float> entry in MLLogger.GetPlayStats()) {

                writetext.WriteLine(entry.Value.ToString() + ":" + entry.Key + ";");
            }

            foreach (KeyValuePair<SurveyStat, float> entry in MLLogger.GetSurveyStats()) {

                writetext.WriteLine(entry.Value.ToString() + ":" + entry.Key + ";");
            }
        }
    }

    /// <summary>
    /// writes level stats to a file to be used by machine learning module
    /// </summary>
    /// <param name="levelStats">LevelStats of current level</param>
    public static void writeMLPredictFile() {

        string path = Application.persistentDataPath + "/" + "predict_" + DateTime.Now.ToString("yy_mm_dd_hh_mm_ss") + ".in";
        using (StreamWriter writetext = new StreamWriter(path)) {

            foreach (KeyValuePair<LevelStat, float> entry in MLLevelStats.GetStats()) {

                writetext.WriteLine(entry.Value.ToString() + ":" + entry.Key + ";");
            }

            foreach (KeyValuePair<PlayStat, float> entry in MLLogger.GetPlayStats()) {

                writetext.WriteLine(entry.Value.ToString() + ":" + entry.Key + ";");
            }
        }
    }
}
