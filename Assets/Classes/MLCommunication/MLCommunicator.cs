using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using UnityEngine;

/// <summary>
/// Class required to communicate with machine learning module.
/// </summary>
public class MLCommunicator {

    protected static Socket socket;
    protected static bool communcationOn;

    public static void Init() {

        communcationOn = false;

        // Connect to a remote device.
        try {
            // Establish the remote endpoint for the socket.
            // This example uses port 11000 on the local computer.
            
            IPHostEntry ipHostInfo = Dns.GetHostEntry(Dns.GetHostName());
            IPAddress ipAddress = Dns.GetHostEntry("localhost").AddressList[0];
            IPEndPoint remoteEP = new IPEndPoint(ipAddress, MLConfig.MLPort);

            // Create a TCP/IP  socket.
            socket = new Socket(AddressFamily.InterNetwork,
                SocketType.Stream, ProtocolType.Tcp);

            // Connect the socket to the remote endpoint. Catch any errors.
            try {
                socket.Connect(remoteEP);

                communcationOn = true;

            }
            catch (ArgumentNullException ane) {
                Debug.Log("ArgumentNullException : {0}" + ane.ToString());
            }
            catch (SocketException se) {
                Debug.Log("Warning: Predictor script should be run before starting game");
                Debug.Log(se.ToString());
            }
            catch (Exception e) {
                Debug.Log("Unexpected exception : {0}" + e.ToString());
            }

        }
        catch (Exception e) {
            Debug.Log(e.ToString());
        }
    }

    /// <summary>
    /// reads parameter tuning data file generated by machine learning module
    /// </summary>
    public static void readMLFile() {

        //TODO:Implement
        return;
    }

    /// <summary>
    /// writes level stats to a file to be used by machine learning module
    /// </summary>
    /// <param name="levelStats">LevelStats of current level</param>
    public static void writeMLTrainFile() {

        string path = Application.persistentDataPath + "/" + "train_" + DateTime.Now.ToString("yy_mm_dd_hh_mm_ss") + ".in";
        using (StreamWriter writetext = new StreamWriter( path)) {

            foreach (KeyValuePair<LevelStat, float> entry in MLLevelStats.GetStats()) {

                writetext.WriteLine(entry.Key + ":" + entry.Value.ToString() + ";");
            }

            foreach (KeyValuePair<PlayStat, float> entry in MLLogger.GetPlayStats()) {

                writetext.WriteLine(entry.Key + ":" + entry.Value.ToString() + ";");
            }

            foreach (KeyValuePair<SurveyStat, float> entry in MLLogger.GetSurveyStats()) {

                writetext.WriteLine(entry.Key + ":" + entry.Value.ToString() + ";");
            }
        }
    }

    /// <summary>
    /// writes level stats to a file to be used by machine learning module
    /// </summary>
    /// <param name="levelStats">LevelStats of current level</param>
    public static void writeMLPredictFile() {

        string path = Application.persistentDataPath + "/" + "predict_" + DateTime.Now.ToString("yy_mm_dd_hh_mm_ss") + ".in";
        using (StreamWriter writetext = new StreamWriter(path)) {

            foreach (KeyValuePair<LevelStat, float> entry in MLLevelStats.GetStats()) {

                writetext.WriteLine(entry.Key + ":" + entry.Value.ToString() + ";");
            }

            foreach (KeyValuePair<PlayStat, float> entry in MLLogger.GetPlayStats()) {

                writetext.WriteLine(entry.Key + ":" + entry.Value.ToString() + ";");
            }
        }
    }

    public static void Close() {

        if( communcationOn) {

            // Release the socket.
            socket.Shutdown(SocketShutdown.Both);
            socket.Close();
        }
    }

    public static float predictDifficulty() {

        if ( !communcationOn) {

            Debug.LogWarning("Warning: Predictor script not found, default difficulty returned");
            return MLConfig.DefaultDifficulty;
        }
        String strMsg = "";

        foreach (KeyValuePair<LevelStat, float> entry in MLLevelStats.GetStats()) {

            strMsg += entry.Value.ToString() + " ";
        }

        foreach (KeyValuePair<PlayStat, float> entry in MLLogger.GetPlayStats()) {

            strMsg += entry.Value.ToString() + " ";
            //Debug.LogWarning(entry.Key + "" + entry.Value.ToString());

        }

        strMsg.Substring(0, strMsg.Length - 1);
        // Data buffer for incoming data.
        byte[] bytes = new byte[1024];

        // Encode the data string into a byte array.

        byte[] msg = Encoding.ASCII.GetBytes(strMsg);

        // Send the data through the socket.
        int bytesSent = socket.Send(msg);

        // Receive the response from the remote device.
        int bytesRec = socket.Receive(bytes);

        string difStr = Encoding.ASCII.GetString(bytes, 0, bytesRec);
        return float.Parse(difStr);
    }
}
